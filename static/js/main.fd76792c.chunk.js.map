{"version":3,"sources":["components/ToDoTemp.js","components/ToDoInsert.js","components/ToDoListItem.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoTemp","children","className","ToDoInsert","onInsert","useState","inputValue","setValue","changeValue","useCallback","e","target","value","clickBtn","preventDefault","type","placeholder","onChange","onClick","ToDoListItem","todo","onRemove","onToggle","id","text","checked","Class","ToDoList","todos","map","key","App","setTodos","nextID","useRef","next","current","concat","removeID","filter","list","selectId","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAYeA,G,MATE,SAAC,GAAc,IAAbC,EAAY,EAAZA,SACjB,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,YAAf,cACA,6BAAMD,M,eC6BGE,EAhCI,SAAC,GAAc,IAAbC,EAAY,EAAZA,SAAY,EAGDC,mBAAS,IAHR,mBAGxBC,EAHwB,KAGbC,EAHa,KAMzBC,EAAcC,uBAAY,SAAAC,GAC9BH,EAASG,EAAEC,OAAOC,SACjB,IAGGC,EAAWJ,uBAAY,SAACC,GAE5BA,EAAEI,iBAGFV,EAASE,GAGTC,EAAS,MACR,CAACH,EAAUE,IAEd,OACE,0BAAMJ,UAAU,cACd,2BAAOA,UAAU,QAAQa,KAAK,OAAOC,YAAY,qDAAaJ,MAAON,EAAYW,SAAUT,IAC3F,4BAAQN,UAAU,MAAMa,KAAK,SAASG,QAASL,GAC7C,kBAAC,IAAD,S,gBCHOM,G,MAtBM,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC9BC,EAAqBH,EAArBG,GAAIC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,QAEjB,OACE,yBAAKvB,UAAU,gBAGb,yBAAKA,UAAWwB,IAAM,WAAY,CAACD,YAAWP,QAAS,kBAAII,EAASC,KACjEE,EAAS,kBAAC,IAAD,MAAe,kBAAC,IAAD,OAI3B,yBAAKvB,UAAWwB,IAAM,OAAQ,CAACD,YAAWP,QAAS,kBAAII,EAASC,KAAMC,GAGtE,yBAAKtB,UAAU,SAASgB,QAAS,kBAAIG,EAASE,KAC5C,kBAAC,IAAD,UCLOI,EAbE,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,MAAOP,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAClC,OACE,yBAAKpB,UAAU,YAGX0B,EAAMC,KAAI,SAAAT,GAAI,OACZ,kBAAC,EAAD,CAAcU,IAAKV,EAAKG,GAAIH,KAAMA,EAAMC,SAAUA,EAAUC,SAAUA,SC2CjES,EA/CH,WAAI,MAGY1B,mBAAS,CACjC,CACEkB,GAAI,EACJC,KAAM,kCACNC,SAAS,KAPC,mBAGPG,EAHO,KAGAI,EAHA,KAYRC,EAASC,iBAAO,GAGhB9B,EAAWK,uBAAY,SAAAe,GAEzB,IAAMW,EAAO,CACXZ,GAAIU,EAAOG,QACXZ,OACAC,SAAS,GAGXO,EAAUJ,EAAMS,OAAOF,IACvBF,EAAOG,SAAW,IACjB,CAACR,IAGAP,EAAWZ,uBAAY,SAAA6B,GAC3BN,EAAUJ,EAAMW,QAAO,SAAAC,GAAI,OAAEA,EAAKjB,KAAOe,QACxC,CAACV,IAGEN,EAAWb,uBAAY,SAAAgC,GAC3BT,EAAUJ,EAAMC,KAAI,SAAAa,GAClB,OAAQA,EAAKnB,KAAOkB,EAAZ,2BAA0BC,GAA1B,IAAgCjB,SAAUiB,EAAKjB,UAAWiB,QAEnE,CAACd,IAEJ,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYxB,SAAUA,IACtB,kBAAC,EAAD,CAAUwB,MAAOA,EAAOP,SAAUA,EAAUC,SAAUA,MCnCxCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fd76792c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ToDoTemp.css';\r\n\r\nconst ToDoTemp = ({children})=>{\r\n  return (\r\n    <div className=\"ToDoTemp\">\r\n      <div className=\"AppTitle\">TO DO LIST</div>\r\n      <div>{children}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoTemp;","import React, {useCallback, useState} from 'react';\r\nimport './ToDoInsert.css';\r\nimport { MdCreate } from \"react-icons/md\";\r\n\r\nconst ToDoInsert = ({onInsert})=>{\r\n\r\n  // inputValue 초기설정\r\n  const [inputValue,setValue] = useState('');\r\n\r\n  // 변경된(입력된) value값을 inputValue에 넣는 콜백함수 \r\n  const changeValue = useCallback(e=>{\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  // submit 버튼을 눌렀을때 \r\n  const clickBtn = useCallback((e)=>{\r\n    // 새로고침이 안되게 하기위해 html form 기본기능 삭제\r\n    e.preventDefault();\r\n\r\n    // inputValue값을 app.js에 insert시키기\r\n    onInsert(inputValue);\r\n\r\n    // value 값을 공백으로 만들기\r\n    setValue('');\r\n  }, [onInsert, inputValue]);\r\n\r\n  return (\r\n    <form className=\"ToDoInsert\">\r\n      <input className=\"input\" type=\"text\" placeholder=\"할 일을 입력하세요\" value={inputValue} onChange={changeValue} />\r\n      <button className=\"btn\" type=\"submit\" onClick={clickBtn}>\r\n        <MdCreate />\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ToDoInsert;","import React from 'react';\r\nimport Class from 'classnames';\r\nimport { MdCheckBoxOutlineBlank, MdCheckBox, MdDelete } from \"react-icons/md\";\r\nimport './ToDoListItem.css';\r\n\r\nconst ToDoListItem = ({todo, onRemove, onToggle})=>{\r\n  const {id, text, checked} = todo;\r\n\r\n  return (\r\n    <div className=\"ToDoListItem\">\r\n\r\n      {/* 체크박스 */}\r\n      <div className={Class('checkbox', {checked})} onClick={()=>onToggle(id)}>\r\n        {checked? <MdCheckBox />:<MdCheckBoxOutlineBlank />}\r\n      </div>\r\n\r\n      {/* 텍스트 */}\r\n      <div className={Class('text', {checked})} onClick={()=>onToggle(id)}>{text}</div>\r\n\r\n      {/* 삭제 버튼 */}\r\n      <div className=\"remove\" onClick={()=>onRemove(id)}>\r\n        <MdDelete />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoListItem;","import React from 'react';\r\nimport ToDoListItem from './ToDoListItem';\r\n\r\nconst ToDoList = ({todos, onRemove, onToggle})=>{\r\n  return (\r\n    <div className=\"ToDoList\">\r\n      {\r\n        // map함수로 todos 리스트의 값을 하나씩 ToDoListItem에 보내기\r\n        todos.map(todo=>(\r\n          <ToDoListItem key={todo.id} todo={todo} onRemove={onRemove} onToggle={onToggle}/>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;","import React, {useState, useRef, useCallback} from 'react';\nimport ToDoTemp from './components/ToDoTemp';\nimport ToDoInsert from './components/ToDoInsert';\nimport ToDoList from './components/ToDoList';\n\nconst App = ()=>{\n\n  // todos 리스트 uesState 초기설정\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      text: '오늘의 할일',\n      checked: false\n    }\n  ]);\n\n  // id 초기값 2부터 시작\n  const nextID = useRef(2);\n\n  // 입력된 값을 리스트에 추가하는 콜백함수\n  const onInsert = useCallback(text=>{\n      // 현재 id, text = 입력된 텍스트, 체크 여부는 false\n      const next = {\n        id: nextID.current,\n        text,\n        checked: false\n      };\n      // concat으로 next를 todos 리스트에 추가 \n      setTodos( todos.concat(next) );\n      nextID.current += 1;\n    }, [todos]);\n\n  // 선택된 리스트를 삭제하는 콜백함수\n  const onRemove = useCallback(removeID=>{\n    setTodos( todos.filter(list=>list.id !== removeID) );\n  }, [todos]);\n\n  // 체크박스 토글 콜백함수\n  const onToggle = useCallback(selectId=>{\n    setTodos( todos.map(data=>{\n      return (data.id === selectId? {...data, checked: !data.checked} : data);\n    }) );\n  }, [todos]);\n\n  return (\n    <ToDoTemp>\n      <ToDoInsert onInsert={onInsert}/>\n      <ToDoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>\n    </ToDoTemp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}